diff --git a/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java b/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java
index cc964ecda8..0c837eac38 100644
--- a/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java
+++ b/oak-store-document/src/main/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDocumentStore.java
@@ -1063,21 +1063,13 @@ public class MongoDocumentStore implements DocumentStore {
                             Filters.eq(Document.MOD_COUNT, modCount)
                     );
 
-                    UpdateResult result = null;
-                    try {
-                        result = execute(session -> {
+                    UpdateResult result = execute(session -> {
                             if (session != null) {
                                 return dbCollection.updateOne(session, query, update);
                             } else {
                                 return dbCollection.updateOne(query, update);
                             }
                         }, collection);
-                    } catch (MongoWriteException e) {
-                        WriteError werr = e.getError();
-                        LOG.error("Failed to update the document with Id={} and size={} with error message '{}'",
-                                updateOp.getId(), updateOp.toString().length(), werr.getMessage());
-                        throw handleException(e, collection, updateOp.getId());
-                    }
                     if (result.getModifiedCount() > 0) {
                         // success, update cached document
                         if (collection == Collection.NODES) {
@@ -1095,22 +1087,14 @@ public class MongoDocumentStore implements DocumentStore {
             Bson query = createQueryForUpdate(updateOp.getId(), updateOp.getConditions());
             FindOneAndUpdateOptions options = new FindOneAndUpdateOptions()
                     .returnDocument(ReturnDocument.BEFORE).upsert(upsert);
-            BasicDBObject oldNode = null;
-            try {
-                oldNode = execute(session -> {
+            BasicDBObject oldNode = execute(session -> {
                     if (session != null) {
-                        return dbCollection.findOneAndUpdate(session, query, update, options);
+                            return dbCollection.findOneAndUpdate(session, query, update, options);
                     } else {
                         return dbCollection.findOneAndUpdate(query, update, options);
                     }
                 }, collection);
-            } catch (MongoCommandException e) {
-                LOG.error("Failed to update the document with Id={} has size={} " +
-                                "with error message '{}'",
-                                updateOp.getId(), updateOp.toString().length(),
-                                SIZE_LIMIT, e.getMessage());
-                throw handleException(e, collection, updateOp.getId());
-            }
+
             if (oldNode == null && upsert) {
                 newEntry = true;
             }
@@ -1139,6 +1123,17 @@ public class MongoDocumentStore implements DocumentStore {
                 }
             }
             return oldDoc;
+        } catch (MongoWriteException e) {
+            WriteError werr = e.getError();
+            LOG.error("Failed to update the document with Id={} is greater than the size limit {} " +
+                            "with error message '{}'",
+                    updateOp.getId(), updateOp.toString().length(), werr.getMessage());
+            throw handleException(e, collection, updateOp.getId());
+        } catch (MongoCommandException e) {
+            LOG.error("Failed to update the document with Id={} has size={} " +
+                            "with error message '{}'",
+                    updateOp.getId(), updateOp.toString().length(), e.getMessage());
+            throw handleException(e, collection, updateOp.getId());
         } catch (Exception e) {
             throw handleException(e, collection, updateOp.getId());
         } finally {
@@ -1496,15 +1491,17 @@ public class MongoDocumentStore implements DocumentStore {
                 insertSuccess = true;
                 return true;
             } catch (BsonMaximumSizeExceededException e) {
+                T doct = null;
                 for (T doc : docs) {
+                    doct = doc;
                     // doc.getMemory()/2 - converting from UTF-16 to UTF-8
                     if (doc.getMemory()/2 > SIZE_LIMIT) {
                         LOG.error("Failed to create the document with Id={} has size={}" +
                                         " with error message '{}",
-                                doc.getId(), doc.getMemory()/2, SIZE_LIMIT, e.getMessage());
+                                doc.getId(), doc.getMemory()/2, e.getMessage());
                     }
                 }
-                throw handleException(e, collection, Document.ID);
+                throw handleException(e, collection, doct.getId());
             }
         } finally {
             stats.doneCreate(watch.elapsed(TimeUnit.NANOSECONDS), collection, ids, insertSuccess);
diff --git a/oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDBExceptionTest.java b/oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDBExceptionTest.java
index f99b06d706..f44e2b00a3 100644
--- a/oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDBExceptionTest.java
+++ b/oak-store-document/src/test/java/org/apache/jackrabbit/oak/plugins/document/mongo/MongoDBExceptionTest.java
@@ -30,7 +30,6 @@ import org.junit.Assume;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import org.junit.Ignore;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -172,7 +171,7 @@ public class MongoDBExceptionTest {
     @Test
     public void multiCreateOrUpdate16MBDoc() {
 
-        List<UpdateOp> updateOps = new ArrayList<UpdateOp>();
+        List<UpdateOp> updateOps = new ArrayList<>();
 
         UpdateOp op = new UpdateOp("/test", true);
         op = create1MBProp(op);
@@ -199,7 +198,7 @@ public class MongoDBExceptionTest {
     @Test
     public void create16MBDoc() {
 
-        List<UpdateOp> updateOps = new ArrayList<UpdateOp>();
+        List<UpdateOp> updateOps = new ArrayList<>();
 
         UpdateOp op1 = new UpdateOp("/test", true);
         op1 = create1MBProp(op1);
@@ -233,7 +232,6 @@ public class MongoDBExceptionTest {
         } catch (DocumentStoreException e) {
             assertThat(e.getMessage(), containsString(exceptionMsg));
        }
-
     }
 
     private void setExceptionMsg() {
@@ -243,23 +241,27 @@ public class MongoDBExceptionTest {
 
     private UpdateOp create1MBProp(UpdateOp op) {
         // create a 1 MB property
-        char[] chars = new char[1024 * 1024];
-        Arrays.fill(chars, '0');
-        String content = new String(chars);
+        String content = create1MBContent();
         op.set("property0", content);
         return op;
     }
+
     private UpdateOp create16MBProp(UpdateOp op) {
         // create a 1 MB property
-        char[] chars = new char[1024 * 1024];
-        Arrays.fill(chars, '0');
-        String content = new String(chars);
+        String content = create1MBContent();
         op.set("property0", content);
 
         //create 16MB property
         for (int i = 1; i < 16; i++) {
-            op.set("property"+ Integer.toString(i), content);
+            op.set("property"+ i, content);
         }
         return op;
     }
+
+    private String create1MBContent() {
+        char[] chars = new char[1024 * 1024];
+        Arrays.fill(chars, '0');
+        String content = new String(chars);
+        return content;
+    }
 }
